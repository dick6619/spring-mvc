<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/batch
			http://www.springframework.org/schema/batch/spring-batch.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context.xsd
			">

	<!-- JobDetailFactory -->
	<!-- job1 sample, put jobDataMap, and auto set -->
	<bean name="job1"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="com.iii.emp.batch.job001.JobEmp" />
		<!-- quartz.job是沒辦法自動呼叫set方法的，一定要放實例在這裡面才會呼叫 -->
		<property name="jobDataMap">
			<map>
				<!-- 需實作序列化 -->
				<entry key="printMessege" value-ref="printMessege" />
			</map>
		</property>
		<property name="durability" value="true" />
	</bean>
	<bean id="printMessege" class="com.iii.emp.domain.PrintMessege" />
	<!-- job2 configuration applicationContextSchedulerContextKey in scFactory-->
	<bean name="job2"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="com.iii.emp.batch.job001.JobEmp2" />
		<property name="jobDataMap">
			<map>
				<!-- application get beanName -->
				<entry key="serviceID" value="messegePrintService" />
			</map>
		</property>
		<property name="durability" value="true" />
	</bean>
	<!-- job3 use spring batch -->
	<bean name="job3"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="com.iii.emp.batch.job001.JobEmp3" />
		<property name="jobDataMap">
			<map>
				<!-- application get beanName -->
				<entry key="jobID" value="emp001" />
			</map>
		</property>
		<property name="durability" value="true" />
	</bean>
	<!-- job4 use jobFactory and autowire annotation-->
	<bean name="job4"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="com.iii.emp.batch.job001.JobEmp4" />
		<property name="jobDataMap">
			<map>
				<!-- application get beanName -->
				<entry key="jobID" value="emp001" />
			</map>
		</property>
		<property name="durability" value="true" />
	</bean>
	<batch:job id="emp001">
		<batch:step id="step1">
			<batch:tasklet ref="emp001Tasklet" />
		</batch:step>
	</batch:job>
	<bean id="emp001Tasklet" class="com.iii.emp.batch.job001.JobEmp001Tasklet" />

	<!-- CronTriggerFactory -->
	<!-- trigger1 -->
	<bean id="trigger1"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="job1" />
		<property name="cronExpression" value="0 0/15 * * * ?" />
	</bean>
	<!-- trigger2 -->
	<bean id="trigger2"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="job2" />
		<property name="cronExpression" value="0 0/20 * * * ?" />
	</bean>
	<!-- trigger3 -->
	<bean id="trigger3"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="job3" />
		<property name="cronExpression" value="0/5 * * * * ?" />
	</bean>
	<!-- trigger4 -->
	<bean id="trigger4"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="job4" />
		<property name="cronExpression" value="0/5 * * * * ?" />
	</bean>

	<!-- schedulerFactory -->
	<bean id="schedulerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<!-- <ref bean="trigger1" /> -->
				<!-- <ref bean="trigger2" /> -->
				<!-- <ref bean="trigger3" /> -->
				<ref bean="trigger4" />
			</list>
		</property>
		<!-- 資料庫存取觸發時間等等相關資訊(實現永續化) -->
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<!-- 在Quartz.JobDetail,Trigger內注入實體的方法之一(最方便...) -->
		<!-- 參考spring官方，推薦 http://blog.btmatthews.com/?p=40 繼承 SpringBeanJobFactory， 
			實作 ApplicationContextAware -->
		<property name="jobFactory">
			<bean
				class="com.iii.framework.core.springbatch.quartz.AutowiringSpringBeanJobFactory" />
		</property>
		<!-- 在Quartz.JobDetail,Trigger內注入實體的方法之一 -->
		<!-- 可以拿到applicationContext，在excute內從applicationContext去getBean -->
		<property name="applicationContextSchedulerContextKey" value="applicationContext" />
		<!-- 覆蓋原來存在的實體 -->
		<property name="overwriteExistingJobs" value="true" />
		<!-- if true the scheduler will not allow this method to return 
		     until all currently executing jobs have completed -->
		<property name="waitForJobsToCompleteOnShutdown" value="false" />

	</bean>

	<!-- 設定及SQL部分 -->
	<!-- quartz.properties -->
	<!-- org.quartz.quartz.properties -->
	<!-- insert sql -->
	<!-- org.quartz.impl.jdbcjobstore -->
</beans>